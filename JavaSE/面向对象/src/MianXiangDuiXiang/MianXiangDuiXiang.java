package MianXiangDuiXiang;

public class MianXiangDuiXiang {
    /*
    面向对象思想的特点：
        1.更符合我们的思想习惯；
        2.可以将复杂的事情简单化；
        3.将我们从执行者变成了指挥者（角色发生了转变）
    面向对象开发：就是不断的创造对象，使用对象，指挥对象；
    面向对象设计：管理和维护对象之间的关系；
    面向对象的特征：封装，继承，多态；
     */

    //类与对象的概述
    /*
    Java中最基本的单位是类，
    成员变量===》事物的属性；
    成员方法===》事物的行为；
     */
    public static void main(String[] args) {
        //创建对象的格式：  类名 对象名 = new 类名();
        //对象名：合法的标识符
        Student s = new Student();          //创建有名字的对象


        s.name = "小明";
        s.age = 32;
        System.out.println(s.name + "今年" + s.age + "了！");


        s.study();
        s.sleep();


        new Student().sleep();          //创建匿名对象并调用方法
    }
}

class Student {                     //定义学生类
    String name;                    //定义成员变量
    int age;
    String gender;

    public void study() {               //定义成员方法
        System.out.println("学生学习");
    }

    public void sleep() {
        System.out.println("学生睡觉");
    }
}

class Phone {
    String brand;           //品牌
    int price;              //价格

    public void call() {
        System.out.println("打电话");
    }

    public void sendMessage() {
        System.out.println("发信息");
    }

    public void playGame() {
        System.out.println("打游戏");
    }
}


//成员变量和局部变量的区别：
    /*
    1.在类中的位置不同；
        成员变量：在类中，方法外；
        局部变量：在方法定义中或方法声明上。
    2.在内存中的位置不同：
        成员变量：在堆内存（成员变量属于对象，对象进堆内存）；
        局部变量：在栈内存（局部变量属于方法，方法进栈内存）；
    3.生命周期不同：
        成员变量：随着对象的创建而存在，随着对象的消失而消失；
        局部变量：随着方法的调用而存在，随着方法的调用完毕而消失；
    4.初始化值不同：
        成员变量：有默认初始化值；
        局部变量：没有默认初始化值，必须定义，赋值，然后才能使用；

    注意事项：
        1.局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用就近原则。
        2.基本数据类型变量包括那些：byte,short,int,long,float,double,boolean,char;
        3.引用数据类型变量包括哪些：数组，类，接口，枚举；
     */

//匿名对象(没有名字的对象)
    /*
    使用场景：
        1.调用方法，仅仅只调用一次的时候（匿名调用可以节省代码） 调用多次的时候不合适，匿名对象调用完毕就是垃圾，可以被垃圾回收器回收；
        2.匿名对象可以作为实际参数传递；

    匿名对象可以调用属性，但没有意义，因为调用之后就变成了垃圾；
    如果需要赋值，还是用用名字的对象。
     */


//封装：隐藏对象的属性和现实细节，仅对外提供公共访问方式。
    /*
    封装的好处：
        1.隐藏现实细节，提供公共的访问方式；
        2.提高代码的复用性；
        3.提高安全性
    封装的原则：
        1.将不需要对外提供的内容都隐藏起来；
        2.把属性隐藏，提供公共方法对其访问。
     */


        /*
        private关键字的特点：
        1.是一个权限修饰符；
        2.可以修饰成员变量和成员方法；
        3.被其修饰的成员只能在本类中进行访问。
         */


        /*
        this关键字（代表当前对象的引用）
        用来区分成员变量和局部变量重名
         */
